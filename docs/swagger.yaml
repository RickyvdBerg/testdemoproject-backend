basePath: /api/v1
definitions:
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Project:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.ProjectCreate:
    properties:
      name:
        type: string
    type: object
  models.ProjectUpdate:
    properties:
      name:
        type: string
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.User:
    properties:
      addedField:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
      updatedAt:
        type: string
    type: object
  models.UserCreate:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserUpdate:
    properties:
      name:
        type: string
    type: object
  utils.APIErrorResponse:
    properties:
      error:
        $ref: '#/definitions/utils.HTTPError'
    type: object
  utils.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  utils.PaginatedResponse:
    properties:
      data:
        type: object
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      summary: Login
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      summary: Register
      tags:
      - Authentication
  /projects:
    get:
      consumes:
      - application/json
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Get all projects
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create a new project
      parameters:
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Create Project
      tags:
      - Project
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectUpdate'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Delete project
      tags:
      - Project
    get:
      consumes:
      - application/json
      description: Get a single project using the ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Get project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Update a project with new values
      parameters:
      - description: project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Update project
      tags:
      - Project
  /projects/{id}/file:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: account image
        in: formData
        name: file
        required: true
        type: file
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Upload an avatar for a project
      tags:
      - Project
  /users:
    get:
      consumes:
      - application/json
      description: Get all users as a paginated resource
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Create user
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get a single user using the ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Get user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update a user with new values
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Update user
      tags:
      - User
  /whoami:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIErrorResponse'
      security:
      - BasicAuth: []
      summary: Based on the authentication token, receive your current information
      tags:
      - User
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
